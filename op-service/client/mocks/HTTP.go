// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// HTTP is an autogenerated mock type for the HTTP type
type HTTP struct {
	mock.Mock
}

// Endpoint provides a mock function with no fields
func (_m *HTTP) Endpoint() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Endpoint")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, path, query, headers
func (_m *HTTP) Get(ctx context.Context, path string, query url.Values, headers http.Header) (*http.Response, error) {
	ret := _m.Called(ctx, path, query, headers)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, url.Values, http.Header) (*http.Response, error)); ok {
		return rf(ctx, path, query, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, url.Values, http.Header) *http.Response); ok {
		r0 = rf(ctx, path, query, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, url.Values, http.Header) error); ok {
		r1 = rf(ctx, path, query, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHTTP creates a new instance of HTTP. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTP(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTP {
	mock := &HTTP{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
